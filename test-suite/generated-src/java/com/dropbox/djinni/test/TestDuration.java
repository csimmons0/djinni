// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from duration.djinni

package com.dropbox.djinni.test;

import java.util.concurrent.atomic.AtomicBoolean;
import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;

public interface TestDuration {
    @Nonnull
    public static String hoursString(@Nonnull java.time.Duration dt)
    {
        return StaticNativeMethods.hoursString(dt);
    }

    @Nonnull
    public static String minutesString(@Nonnull java.time.Duration dt)
    {
        return StaticNativeMethods.minutesString(dt);
    }

    @Nonnull
    public static String secondsString(@Nonnull java.time.Duration dt)
    {
        return StaticNativeMethods.secondsString(dt);
    }

    @Nonnull
    public static String millisString(@Nonnull java.time.Duration dt)
    {
        return StaticNativeMethods.millisString(dt);
    }

    @Nonnull
    public static String microsString(@Nonnull java.time.Duration dt)
    {
        return StaticNativeMethods.microsString(dt);
    }

    @Nonnull
    public static String nanosString(@Nonnull java.time.Duration dt)
    {
        return StaticNativeMethods.nanosString(dt);
    }

    @Nonnull
    public static java.time.Duration hours(int count)
    {
        return StaticNativeMethods.hours(count);
    }

    @Nonnull
    public static java.time.Duration minutes(int count)
    {
        return StaticNativeMethods.minutes(count);
    }

    @Nonnull
    public static java.time.Duration seconds(int count)
    {
        return StaticNativeMethods.seconds(count);
    }

    @Nonnull
    public static java.time.Duration millis(int count)
    {
        return StaticNativeMethods.millis(count);
    }

    @Nonnull
    public static java.time.Duration micros(int count)
    {
        return StaticNativeMethods.micros(count);
    }

    @Nonnull
    public static java.time.Duration nanos(int count)
    {
        return StaticNativeMethods.nanos(count);
    }

    @Nonnull
    public static java.time.Duration hoursf(double count)
    {
        return StaticNativeMethods.hoursf(count);
    }

    @Nonnull
    public static java.time.Duration minutesf(double count)
    {
        return StaticNativeMethods.minutesf(count);
    }

    @Nonnull
    public static java.time.Duration secondsf(double count)
    {
        return StaticNativeMethods.secondsf(count);
    }

    @Nonnull
    public static java.time.Duration millisf(double count)
    {
        return StaticNativeMethods.millisf(count);
    }

    @Nonnull
    public static java.time.Duration microsf(double count)
    {
        return StaticNativeMethods.microsf(count);
    }

    @Nonnull
    public static java.time.Duration nanosf(double count)
    {
        return StaticNativeMethods.nanosf(count);
    }

    @CheckForNull
    public static java.time.Duration box(long count)
    {
        return StaticNativeMethods.box(count);
    }

    public static long unbox(@CheckForNull java.time.Duration dt)
    {
        return StaticNativeMethods.unbox(dt);
    }

    static final class StaticNativeMethods
    {

        @Nonnull
        public static native String hoursString(@Nonnull java.time.Duration dt);

        @Nonnull
        public static native String minutesString(@Nonnull java.time.Duration dt);

        @Nonnull
        public static native String secondsString(@Nonnull java.time.Duration dt);

        @Nonnull
        public static native String millisString(@Nonnull java.time.Duration dt);

        @Nonnull
        public static native String microsString(@Nonnull java.time.Duration dt);

        @Nonnull
        public static native String nanosString(@Nonnull java.time.Duration dt);

        @Nonnull
        public static native java.time.Duration hours(int count);

        @Nonnull
        public static native java.time.Duration minutes(int count);

        @Nonnull
        public static native java.time.Duration seconds(int count);

        @Nonnull
        public static native java.time.Duration millis(int count);

        @Nonnull
        public static native java.time.Duration micros(int count);

        @Nonnull
        public static native java.time.Duration nanos(int count);

        @Nonnull
        public static native java.time.Duration hoursf(double count);

        @Nonnull
        public static native java.time.Duration minutesf(double count);

        @Nonnull
        public static native java.time.Duration secondsf(double count);

        @Nonnull
        public static native java.time.Duration millisf(double count);

        @Nonnull
        public static native java.time.Duration microsf(double count);

        @Nonnull
        public static native java.time.Duration nanosf(double count);

        @CheckForNull
        public static native java.time.Duration box(long count);

        public static native long unbox(@CheckForNull java.time.Duration dt);
    }

    static final class CppProxy implements TestDuration
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }
    }
}
